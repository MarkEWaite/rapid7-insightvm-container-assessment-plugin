package com.rapid7.sdlc.plugin.ruleset.property;

import com.rapid7.sdlc.plugin.api.model.Image;
import com.rapid7.sdlc.plugin.api.model.Package;
import com.rapid7.sdlc.plugin.ruleset.CriterionName;
import java.util.List;
import java.util.Set;
import static java.util.stream.Collectors.toList;
import static java.util.stream.Collectors.toSet;

/**
 * A property that is satisfied if there exists any vulnerability with a title substring-matched
 * by the given pattern.
 */
public class VulnerabilityTitle extends StringContainsPropertyEvaluator {

  public static final String displayName = "Vulnerablity title contains";

  public VulnerabilityTitle() {

  }

  public VulnerabilityTitle(String pattern) {
    super(pattern);
  }

  @Override
  public String getDisplayName() {
    return displayName;
  }

  @Override
  public Set<Package> getQualifyingPackages(Image image) {
    return image.getPackages().stream().filter(pkg -> pkg.getAssessment().getFindings().stream()
          .anyMatch(finding -> finding.getVulnerability().getTitle().toLowerCase().contains(pattern.toLowerCase())))
        .collect(toSet());
  }

  @Override
  public List<String> getMatches(Image image) {
    return image.getPackages().stream()
        .map(Package::getAssessment)
        .flatMap(assessment -> assessment.getFindings().stream()
          .map(finding -> finding.getVulnerability().getTitle())
          .filter( t -> t.toLowerCase().contains(pattern.toLowerCase())))
        .collect(toList());
  }

  @Override
  public String getCriterionName() {
    return CriterionName.VULN_NAME.name();
  }
}
