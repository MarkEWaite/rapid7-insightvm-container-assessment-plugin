package com.rapid7.sdlc.plugin.api.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Objects;
import java.util.StringJoiner;

public class ImageVulnerabilityExploitability {

  @JsonProperty("exploitable")
  private Boolean exploitable = null;

  @JsonProperty("exploits")
  private Integer exploits = null;

  @JsonProperty("exposed_to_malware")
  private Boolean exposedToMalware = null;

  @JsonProperty("malware_kits")
  private Integer malwareKits = null;

  public ImageVulnerabilityExploitability exploitable(Boolean exploitable) {
    this.exploitable = exploitable;
    return this;
  }

  public Boolean isExploitable() {
    return exploitable;
  }

  public void setExploitable(Boolean exploitable) {
    this.exploitable = exploitable;
  }

  public ImageVulnerabilityExploitability exploits(Integer exploits) {
    this.exploits = exploits;
    return this;
  }

  public Integer getExploits() {
    return exploits;
  }

  public void setExploits(Integer exploits) {
    this.exploits = exploits;
  }

  public ImageVulnerabilityExploitability exposedToMalware(Boolean exposedToMalware) {
    this.exposedToMalware = exposedToMalware;
    return this;
  }

  public Boolean isExposedToMalware() {
    return exposedToMalware;
  }

  public void setExposedToMalware(Boolean exposedToMalware) {
    this.exposedToMalware = exposedToMalware;
  }

  public ImageVulnerabilityExploitability malwareKits(Integer malwareKits) {
    this.malwareKits = malwareKits;
    return this;
  }

  public Integer getMalwareKits() {
    return malwareKits;
  }

  public void setMalwareKits(Integer malwareKits) {
    this.malwareKits = malwareKits;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    else if (!(obj instanceof ImageVulnerabilityExploitability))
      return false;
    else {
      ImageVulnerabilityExploitability imageVulnerabilityExploitability = (ImageVulnerabilityExploitability) obj;
      return Objects.equals(this.exploitable, imageVulnerabilityExploitability.exploitable)
          && Objects.equals(this.exploits, imageVulnerabilityExploitability.exploits)
          && Objects.equals(this.exposedToMalware, imageVulnerabilityExploitability.exposedToMalware)
          && Objects.equals(this.malwareKits, imageVulnerabilityExploitability.malwareKits);
    }
  }

  @Override
  public int hashCode() {
    return Objects.hash(exploitable, exploits, exposedToMalware, malwareKits);
  }

  @Override
  public String toString() {
    return new StringJoiner(", ", ImageVulnerabilityExploitability.class.getSimpleName() + "[", "]")
        .add("exploitable=" + exploitable)
        .add("exploits=" + exploits)
        .add("exposedToMalware=" + exposedToMalware)
        .add("malwareKits=" + malwareKits)
        .toString();
  }
}
