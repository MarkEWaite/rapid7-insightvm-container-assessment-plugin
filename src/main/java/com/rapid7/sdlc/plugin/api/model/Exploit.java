package com.rapid7.sdlc.plugin.api.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.StringJoiner;

public class Exploit {

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("name")
  private String name = null;

  /**
   * Gets or Sets rank
   */
  public enum RankEnum {
    MANUAL("MANUAL"),
    
    NORMAL("NORMAL"),
    
    AVERAGE("AVERAGE"),
    
    LOW("LOW"),
    
    GOOD("GOOD"),
    
    GREAT("GREAT"),
    
    EXCELLENT("EXCELLENT");

    private String value;

    RankEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RankEnum fromValue(String text) {
      for (RankEnum b : RankEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("rank")
  private RankEnum rank = null;

  /**
   * Gets or Sets skillLevel
   */
  public enum SkillLevelEnum {
    NOVICE("novice"),
    
    INTERMEDIATE("intermediate"),
    
    EXPERT("expert");

    private String value;

    SkillLevelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SkillLevelEnum fromValue(String text) {
      for (SkillLevelEnum b : SkillLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("skill_level")
  private SkillLevelEnum skillLevel = null;

  /**
   * Gets or Sets source
   */
  public enum SourceEnum {
    EXPLOITDB("EXPLOITDB"),
    
    METASPLOIT("METASPLOIT");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SourceEnum fromValue(String text) {
      for (SourceEnum b : SourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("source")
  private SourceEnum source = null;

  public Exploit description(String description) {
    this.description = description;
    return this;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Exploit id(String id) {
    this.id = id;
    return this;
  }

  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Exploit name(String name) {
    this.name = name;
    return this;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Exploit rank(RankEnum rank) {
    this.rank = rank;
    return this;
  }

  public RankEnum getRank() {
    return rank;
  }

  public void setRank(RankEnum rank) {
    this.rank = rank;
  }

  public Exploit skillLevel(SkillLevelEnum skillLevel) {
    this.skillLevel = skillLevel;
    return this;
  }

  public SkillLevelEnum getSkillLevel() {
    return skillLevel;
  }

  public void setSkillLevel(SkillLevelEnum skillLevel) {
    this.skillLevel = skillLevel;
  }

  public Exploit source(SourceEnum source) {
    this.source = source;
    return this;
  }

  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    else if (!(obj instanceof Exploit))
      return false;
    else {
      Exploit exploit = (Exploit) obj;
      return Objects.equals(this.description, exploit.description)
          && Objects.equals(this.id, exploit.id)
          && Objects.equals(this.name, exploit.name)
          && Objects.equals(this.rank, exploit.rank)
          && Objects.equals(this.skillLevel, exploit.skillLevel)
          && Objects.equals(this.source, exploit.source);
    }
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, name, rank, skillLevel, source);
  }

  @Override
  public String toString() {
    return new StringJoiner(", ", Exploit.class.getSimpleName() + "[", "]")
        .add("description=" + description)
        .add("id=" + id)
        .add("name=" + name)
        .add("rank=" + rank)
        .add("skillLevel=" + skillLevel)
        .add("source=" + source)
        .toString();
  }
}
